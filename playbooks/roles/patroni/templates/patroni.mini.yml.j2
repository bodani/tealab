###############################################################mini patroni config##############################################
#                                                                                                                              #
#                         Try to do it without modifying the parameters of the database                                        #
#                                                                                                                              #
#################################################################################################################################
scope: {{ PG_CLUSTER_NAME }}
namespace: /pg/
name: {{ application_name }}

restapi:
  listen: {{ inventory_hostname }}:8008
  connect_address: {{ inventory_hostname }}:8008

  authentication:
    username: {{ REST_API_USERNAME }}
    password: {{ REST_API_PASSWORD }}

ctl:
  insecure: true # Allow connections to Patroni REST API without verifying certificates

#--------------------------------------------------------------#
# log
#--------------------------------------------------------------#
log:
  level: INFO                           #  NOTEST|DEBUG|INFO|WARNING|ERROR|CRITICAL
  dir: /var/log/patroni                 #  patroni log dir
  file_size: 33554432                   #  32MB log triggers log rotation
  file_num: 20                          #  keep at most 30x32MB = 1GB log
  dateformat: '%Y-%m-%d %H:%M:%S %z'    #  IMPORTANT: discard milli timestamp
  format: '%(asctime)s %(levelname)s: %(message)s'

etcd3:
  #Provide host to do the initial discovery of the cluster topology:
  hosts: '{{ ETCD_HOSTS }}'

{% if ETCD_USERNAME is defined | bool %}
  username: {{ ETCD_USERNAME }}| default("")
{% endif %}
{% if ETCD_PASSWORD is defined | bool %}
  password: {{ ETCD_PASSWORD }}| default("")
{% endif %}
  protocol: https
  cacert: /etc/patroni/certs/etcd-ca.pem
  cert: /etc/patroni/certs/etcd-client-cert.pem
  key: /etc/patroni/certs/etcd-client-key.pem

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 10485760
    primary_start_timeout: 300
    synchronous_mode: false
    failsafe_mode: true
    postgresql:
      use_pg_rewind: true
      use_slots: false
      #------------------------------------------------------------#
      # how to react to database operations
      #------------------------------------------------------------#
      # event callback script log: /var/log/patroni/callback.log
      callbacks:
        #on_start: /etc/patroni/callbacks/callback.sh
        #on_stop: /etc/patroni/callbacks/callback.sh
        #on_reload: /etc/patroni/callbacks/callback.sh
        #on_restart: /etc/patroni/callbacks/callback.sh
        on_role_change: /etc/patroni/callbacks/callback.sh
      #------------------------------------------------------------#
      # how to create replica
      #------------------------------------------------------------#
      # create replica method: default pg_basebackup
      create_replica_methods:
        - basebackup
      basebackup:
        - max-rate: '100M'
        - checkpoint: fast
        - verbose
        - progress
####################################################################################
#                         postgresql start parameters                              #
####################################################################################
      # parameters must hold the same values on the primary and the replicas
      parameters:
        wal_level: {{ wal_level }}
        hot_standby: {{ hot_standby }}
        max_connections: {{ max_connections }}
        max_worker_processes: {{ max_worker_processes }}
        max_prepared_transactions: {{ max_prepared_transactions }}
        max_locks_per_transaction: {{ max_locks_per_transaction }}
        wal_log_hints: {{ wal_log_hints }}
        track_commit_timestamp: {{ track_commit_timestamp }}
      
        max_wal_senders: {{ max_wal_senders }}
        max_replication_slots: {{ max_replication_slots }}
        wal_keep_segments: {{ wal_keep_segments }}
        wal_keep_size: {{ wal_keep_size }}

  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
    # monitor user 
    - host all {{ MON_USER }} 127.0.0.1/32 trust
    # superuser local connetion
    - local all postgres          peer
    - local postgres {{ SUP_USER }}         scram-sha-256
    # bussiness & pg_rewind user 
    - host all all 10.0.0.0/8     scram-sha-256
    - host all all 172.16.0.0/12  scram-sha-256
    - host all all 192.168.0.0/16 scram-sha-256
    # bussiness ssl 
    - hostssl all all 10.0.0.0/8     scram-sha-256
    - hostssl all all 172.16.0.0/12  scram-sha-256
    - hostssl all all 192.168.0.0/16 scram-sha-256
    # replicaion user
    - host replication {{ REP_USER}} 10.0.0.0/8 scram-sha-256
    - host replication {{ REP_USER}} 172.16.0.0/12 scram-sha-256
    - host replication {{ REP_USER}} 192.168.0.0/16 scram-sha-256

  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
  post_init: /etc/patroni/setup_cluster.sh
  
  # Some additional users users which needs to be created after initializing new cluster
  users:
    {{ REP_USER }}:
      password: '{{ REP_PASSWORD }}'
      options:
        - REPLICATION

postgresql:
#------------------------------------------------------------#
# how to connect to postgres
#------------------------------------------------------------#
  bin_dir: {{PG_BIN}}
  data_dir: {{PG_DATA}}
  config_dir: {{PG_CONFIG}}
  pgpass: /var/lib/pgsql/.pgpass
  listen: 127.0.0.1,{{inventory_hostname}}:5432
  connect_address: {{inventory_hostname}}:5432
  use_unix_socket: true # default: /var/run/postgresql, /tmp

#------------------------------------------------------------#
# who to connect to postgres 
#------------------------------------------------------------#
  authentication:
# create user @ initdb -U 
    superuser:
      username: {{SUP_USER}}
{% if SUP_PASSWORD is defined %}      
      password: {{SUP_PASSWORD}}
{% endif%}
    replication:
      username: {{ REP_USER }}
      password: {{ REP_PASSWORD }}
{% if PG_VERSION > 10 %}
    rewind:  # Has no effect on postgres 10 and lower (use superuser)
      username: {{ REWIND_USER }}
      password: '{{ REWIND_PASSWORD }}'
{%endif%}

#watchdog:
#  mode: automatic # Allowed values: off, automatic, required
#  device: /dev/watchdog
#  safety_margin: 5

tags:
    nofailover: false
    noloadbalance: false
    clonefrom: {{clone_form}} 
    nosync: false
    version:  {{ PG_VERSION }}


    