############################################################
#        初始化数据库                                        #
############################################################
- name: init postgres db 
  become_user: postgres
  become_method: sudo
  shell: |
      /usr/pgsql-{{PG_VERSION}}/bin/initdb  --data-checksums -D {{PG_DATA}}
  # when: need_init_db|bool 

############################################################
#         配置数据库                                        #
############################################################
# - name: postgres include conf
#   shell: |
#     cat {{PG_DATA}}/postgresql.conf | grep pg_tea.conf ||  echo "include = 'pg_tea.conf' " >> {{PG_DATA}}/postgresql.conf
- name: prepare postgres config
  template:
    src: pg_tea-{{PG_VERSION}}.conf.j2
    dest: "{{PG_DATA}}/pg_tea.conf"
    owner: postgres
    group: postgres
  # when: 
  #  - need_init_db|bool

- name: include pg_tea.conf
  lineinfile:
    path: "{{PG_DATA}}/postgresql.conf"
    line: "include = 'pg_tea.conf'"
  notify:
  - restart postgresql

- name: prepare postgres pg_hba
  template:
    src: pg_hba-10.conf.j2
    dest: "{{PG_DATA}}/pg_hba.conf"
    owner: postgres
    group: postgres
  notify: reload postgresql

############################################################
#        启动数据库服务                                      #
############################################################
- name: start postgresql service
  service:  
    name: postgresql-{{PG_VERSION}}
    state: started
    enabled: true

- name: wait for postgresql start
  wait_for: 
    port: 5432
    state: started

#  采用 sql 创建用户 减少安装依赖
# pip install psycopg2
# pip install  pyghmi
############################################################
#        创建数据库 Replication User                         #
############################################################
- name: postgres initdb | create user for REPLICATION on master postgres
  # postgresql_user:
    # name: "{{ rep_user }}"
    # password: "{{ rep_password | mandatory }}"
    # role_attr_flags: REPLICATION
    # state: present
    # conn_limit: 10
    # no_password_changes: yes
  postgresql_query: 
    db: postgres
    query: |
      DO
      $do$
      BEGIN
        IF EXISTS (
            SELECT FROM pg_catalog.pg_user
            WHERE  usename = '{{ rep_user }}') THEN
        ELSE
            set password_encryption TO "scram-sha-256";
            create user {{ rep_user }}  with encrypted password '{{ rep_password | mandatory }}' REPLICATION CONNECTION LIMIT 10;
        END IF;
      END
      $do$;
  become_user: postgres
  no_log: true
  run_once: true