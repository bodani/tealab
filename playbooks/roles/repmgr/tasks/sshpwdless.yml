###########################################################################################################
#          passwordless ssh conneciton  for `switchover`                                                  #
###########################################################################################################
#
# 1 , 在主节点创建key pair
# 2 ， 将key pair 下载到本机ansible 控制机
# 3 ， 分发到其他从节点
# 4 ， 清理本地节点
# 是否存在安全问题？ 另一个思路: 在每一个node节点分别创建各自的 keypair ,将所有的public key 进行megre. private key 没有在网络中传输过。 但后期对节点的增加删除会麻烦些。
- name: repmgr | Ensure ssh directory
  file:
    path: "/var/lib/pgsql/.ssh"
    state: directory
    owner: "postgres"
    group: "postgres"
    mode: '0750'
  become: true
  become_user: postgres

- name: repmgr | Create ssh rsa key for postgres user
  openssh_keypair:
    path: "/var/lib/pgsql/.ssh/id_rsa"
    type: dsa
  become: true
  become_user: postgres
  when: replicaof is undefined

- name: repmgr | Create buffer directory
  file:
    path: /tmp/repmgr_buffer/
    state: directory
    mode: '0777'
  delegate_to: localhost
  run_once: true

- name: repmgr | Fetch ssh  key pair 
  fetch:
    dest: "/tmp/repmgr_buffer/postgres_{{ item }}"
    src: "/var/lib/pgsql/.ssh/{{ item }}"
    flat: true  
  with_items: 
    - id_rsa.pub
    - id_rsa
  when: replicaof is undefined

- name: repmgr | Destribute public key pair rsa
  copy: 
    dest: "/var/lib/pgsql/.ssh/{{ item }}"
    src: "/tmp/repmgr_buffer/postgres_{{ item }}"
    owner: postgres
    group: postgres
    mode: '0600'
  with_items: 
    - id_rsa
  when: replicaof is defined

- name: repmgr | Destribute public key pair pub
  copy: 
    dest: "/var/lib/pgsql/.ssh/{{ item }}"
    src: "/tmp/repmgr_buffer/postgres_{{ item }}"
    owner: postgres
    group: postgres
    mode: '0644'
  with_items: 
    - id_rsa.pub
  when: replicaof is defined

- name: set authorized key
  authorized_key:
    user: "postgres"
    key: "{{ lookup('file','/tmp/repmgr_buffer/postgres_id_rsa.pub') }}"
    state: present

- name: repmgr | Collect ssh fingerprints
  become_user: postgres
  shell: >
    ssh-keyscan
    {% for host in groups['postgresql'] %}
    {{ host }}
    {% endfor %}
  register: __ssh_fingerprints

- name: repmgr| Generate ssh known_hosts
  become_user: postgres
  lineinfile:
    dest: ~/.ssh/known_hosts
    create: yes
    owner: "postgres"
    group: "postgres"
    mode: 0600
    line: "{{ item }}"
  with_items: "{{ __ssh_fingerprints.stdout_lines }}"
  no_log: true
