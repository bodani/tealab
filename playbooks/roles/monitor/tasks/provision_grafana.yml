---
# - name: set org tea
#   shell: |
#     curl -u '{{ grafana_admin_username }}:{{ grafana_admin_password }}' -H 'Content-Type: application/json'  -X PUT  http://127.0.0.1:3000/api/org/1  -d '{"name": "tea"}'

# -  curl -I   -u 'admin:admin' -H 'Content-Type: application/json'  -X GET  http://127.0.0.1:3000/api/datasources/name/Prometheus
- name: get datasource prometheus by name
  uri:
    url: http://127.0.0.1:3000/api/datasources/name/Prometheus_tea
    url_username: "{{ grafana_admin_username }}"
    url_password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    headers: 
      Content-Type: application/json
    method: GET
    status_code: 
      - 200
      - 404
  register: datasource_result

- name: print out get datasouce result
  debug:
    msg: "{{ datasource_result.status }}"

- name: add datasource prometheus 
  uri:
    url: http://127.0.0.1:3000/api/datasources
    url_username: "{{ grafana_admin_username }}"
    url_password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    headers: 
      Content-Type: application/json
    body_format: json
    method: POST
    body: '{
      "name": "Prometheus_tea",
      "type": "prometheus",
      "typeName": "Prometheus",
      "typeLogoUrl": "public/app/plugins/datasource/prometheus/img/prometheus_logo.svg",
      "access": "proxy",
      "url": "http://127.0.0.1:9090",
      "user": "",
      "database": "",
      "basicAuth": false,
      "isDefault": true,
      "jsonData": {
        "httpMethod": "POST"
      },
      "readOnly": false
      }'
  # ignore_errors: true
  when: datasource_result.status == 404

  # shell: | 
    # curl -u '{{ grafana_admin_username }}:{{ grafana_admin_password }}' -H 'Content-Type: application/json'  -X POST  http://127.0.0.1:3000/api/datasources -d  '{ 
    # "name": "Prometheus",
    # "type": "prometheus",
    # "typeName": "Prometheus",
    # "typeLogoUrl": "public/app/plugins/datasource/prometheus/img/prometheus_logo.svg",
    # "access": "proxy",
    # "url": "http://127.0.0.1:9090",
    # "user": "",
    # "database": "",
    # "basicAuth": false,
    # "isDefault": true,
    # "jsonData": {
    #   "httpMethod": "POST"
    # },
    # "readOnly": false
    # }'

#--------------------------------------------------------------#
# Copy grafana.py
#--------------------------------------------------------------#
- name: Sync grafana.py
  tags: [ always ]
  copy:
    src: dashboards/{{item}}
    dest: /var/lib/grafana/
    owner: grafana
    group: grafana
    mode: 0755
  with_items: 
    - grafana.py
  
- name: Sync dashboard.py
  tags: [ always ]
  template:
    src: "{{ item.src }}"
    dest: /var/lib/grafana/{{ item.dest }}
    owner: grafana
    group: grafana
    mode: 0755
  with_items: 
    - { "src": "load_dashboard.sh.j2", "dest": "load_dashboard.sh" }
    - { "src": "clean_dashboards_jsons.sh.j2", "dest": "clean_dashboards_jsons.sh" }

#--------------------------------------------------------------#
# Provisioning
#--------------------------------------------------------------#
- name: Provisioning grafana with grafana.py
  tags: [ monitor, dashboard_init ]
  ignore_errors: true
  shell: |
    #!/bin/bash

    # grafana access info
    export GRAFANA_ENDPOINT="http://127.0.0.1:3000"
    export GRAFANA_USERNAME={{ grafana_admin_username }}
    export GRAFANA_PASSWORD={{ grafana_admin_password }}

    # run provisinoing logic
    python /var/lib/grafana/grafana.py init /var/lib/grafana/dashboards

- name: Add domain dashboard
  tags: [ monitor ]
  copy:
    src: dashboards/{{item}}
    dest: /var/lib/grafana/dashboards
    owner: grafana
    group: grafana
  with_items: 
    - domain_https.json

...