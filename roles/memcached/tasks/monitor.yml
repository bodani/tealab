- name: prepare memcached monitor
  copy: 
    dest: /usr/local/bin/memcached_exporter
    src: "{{local_bin}}/memcached/memcached_exporter"
    mode: "0755"
  tags: monitor

- name: prepare memcached_exporter service
  template: 
    dest: /usr/lib/systemd/system/memcached_exporter.service
    src: memcached_exporter.service.j2
  notify: restart memcached_exporter
  tags: monitor

- name: start memcached_exporter service
  systemd:
    name: memcached_exporter
    state: started
    enabled: yes
    daemon_reload: yes
  notify: restart memcached_exporter
  tags: monitor

- name: wait_for memcached_exporter started
  wait_for:
    port: 9150
    state: started
  tags: monitor

- name: create prometheus filediscover memcached yml
  blockinfile:
    path: /etc/prometheus/prometheus.yml
    state: present
    marker: "# {mark} MEMCACHED JOB  "
    content: |
      #  promethes auto discover memcached jobs  
        - job_name: 'memcached'
          file_sd_configs:
            - refresh_interval: 10s	
              files:
              - /etc/prometheus/memcached/*.yml
    # validate: promtool check config %s
  notify: restart_prometheus  
  delegate_to: "{{ item }}"
  with_items: "{{ groups['monitor'] }}"
  run_once: true  

- name: create data path prometheus memcached 
  file:
    path: /etc/prometheus/memcached/
    state: directory
  delegate_to: "{{ item }}"
  with_items: "{{ groups['monitor'] }}"
  run_once: true 
  tags: monitor

- name: add memcached targets
  copy:
    dest: /etc/prometheus/memcached/{{ inventory_hostname }}.yml
    content: |
      - targets: ['{{ inventory_hostname }}:9150']
        labels:
          instance: '{{ inventory_hostname }}'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['monitor'] }}"
  tags: monitor, targets

- name: prepare memcached dashboard 
  copy:
    src: dashboards/memcached
    dest: /var/lib/grafana/dashboards/
    owner: grafana
    group: grafana
  delegate_to: "{{ item }}"
  with_items: "{{ groups['monitor'] }}"
  run_once: true
  tags: monitor

- name: load grafana dashboard
  shell: | 
    sh /var/lib/grafana/load_dashboard.sh
    sh /var/lib/grafana/clean_dashboards_jsons.sh
  delegate_to: "{{ item }}"
  with_items: "{{ groups['monitor'] }}"
  run_once: true  